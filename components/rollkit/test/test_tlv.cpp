#include "unity.h"
#include "rollkit/tlv.hpp"

#include <string>

using namespace std;

TEST_CASE("Test Simple TLV Parse - Should have type of 5", "[TLV]") {
  char tlv_test_buf[] = {0x05, 0x01, 0x23};
  string tlv_test(tlv_test_buf, 3);
  auto tlvs = rollkit::TLV::decode(tlv_test);
  TEST_ASSERT(tlvs.size() == 1);
  TEST_ASSERT(tlvs[0].get_type() == 5);
}

TEST_CASE("Test Simple TLV Parse - Should be length 1 byte", "[TLV]") {
  char tlv_test_buf[] = {0x05, 0x01, 0x23};
  string tlv_test(tlv_test_buf, 3);
  auto tlvs = rollkit::TLV::decode(tlv_test);
  TEST_ASSERT(tlvs.size() == 1);
  TEST_ASSERT(tlvs[0].length() == 1);
}

TEST_CASE("Test Simple TLV Parse - Should contain the value `#`", "[TLV]") {
  char tlv_test_buf[] = {0x05, 0x01, 0x23};
  string tlv_test(tlv_test_buf, 3);
  auto tlvs = rollkit::TLV::decode(tlv_test);
  TEST_ASSERT(tlvs.size() == 1);
  TEST_ASSERT(tlvs[0].get_value() == "#");
}

TEST_CASE("Test Multiple TLV Parse - Should contain 3 TLVs", "[TLV]") {
  char tlv_test_buf[] = {0x05, 0x01, 0x23, 0x05, 0x00, 0x05, 0x01, 0x40};
  //                     TLV 1 `#`         TLV 2 ``    TLV 3 `@`
  string tlv_test(tlv_test_buf, 8);
  auto tlvs = rollkit::TLV::decode(tlv_test);
  TEST_ASSERT_EQUAL_INT(3, tlvs.size());
}

TEST_CASE("Test Multiple TLV Parse - 1st TLV Should contain `#`", "[TLV]") {
  char tlv_test_buf[] = {0x05, 0x01, 0x23, 0x05, 0x00, 0x05, 0x01, 0x40};
  //                     TLV 1 `#`         TLV 2 ``    TLV 3 `@`
  string tlv_test(tlv_test_buf, 8);
  auto tlvs = rollkit::TLV::decode(tlv_test);
  TEST_ASSERT_EQUAL_INT(3, tlvs.size());
  TEST_ASSERT(tlvs[0].length() == 1);
  TEST_ASSERT(tlvs[0].get_value() == "#");
}

TEST_CASE("Test Multiple TLV Parse - 2nd TLV Should contain ``", "[TLV]") {
  char tlv_test_buf[] = {0x05, 0x01, 0x23, 0x05, 0x00, 0x05, 0x01, 0x40};
  //                     TLV 1 `#`         TLV 2 ``    TLV 3 `@`
  string tlv_test(tlv_test_buf, 8);
  auto tlvs = rollkit::TLV::decode(tlv_test);
  TEST_ASSERT_EQUAL_INT(3, tlvs.size());
  TEST_ASSERT(tlvs[1].length() == 0);
  TEST_ASSERT(tlvs[1].get_value() == "");
}

TEST_CASE("Test Multiple TLV Parse - 3rd TLV Should contain `@`", "[TLV]") {
  char tlv_test_buf[] = {0x05, 0x01, 0x23, 0x05, 0x00, 0x05, 0x01, 0x40};
  //                     TLV 1 `#`         TLV 2 ``    TLV 3 `@`
  string tlv_test(tlv_test_buf, 8);
  auto tlvs = rollkit::TLV::decode(tlv_test);
  TEST_ASSERT_EQUAL_INT(3, tlvs.size());
  TEST_ASSERT(tlvs[2].length() == 1);
  TEST_ASSERT(tlvs[2].get_value() == "@");
}


TEST_CASE("Test Fragmented TLV Parse - Should Be One Defragmented TLV", "[TLV]") {
  char tlv_test_buf[] = {
    0x05, 0xff,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40,
    0x05, 0x01, 0x40
  };
  string tlv_test(tlv_test_buf, 260);
  auto tlvs = rollkit::TLV::decode(tlv_test);
  TEST_ASSERT_EQUAL_INT(1, tlvs.size());
  TEST_ASSERT(tlvs[0].length() == 256);
  TEST_ASSERT(tlvs[0].get_value() == "\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@"
);
}

TEST_CASE("Test Fragmented TLV Parse - Should Be One Defragmented And One Regular TLV", "[TLV]") {
  char tlv_test_buf[] = {
    0x05, 0xff,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40,
    0x05, 0x01, 0x40,
    0x05, 0x01, 0x23
  };
  string tlv_test(tlv_test_buf, 263);
  auto tlvs = rollkit::TLV::decode(tlv_test);

  TEST_ASSERT_EQUAL_INT(2, tlvs.size());
  TEST_ASSERT(tlvs[0].length() == 256);
  TEST_ASSERT(tlvs[0].get_value() == "\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@\
");

  TEST_ASSERT(tlvs[1].length() == 1);
  TEST_ASSERT(tlvs[1].get_value() == "#");
}

TEST_CASE("Test Serialization Of Small TLV", "[TLV]") {
  auto tlv = rollkit::TLV(5, "%");
  char serial_arr[] = {0x05, 0x01, 0x25};
  string serial_tlv(serial_arr, 3);
  TEST_ASSERT(tlv.serialize() == serial_tlv);
}

TEST_CASE("Test Serialization Of Large TLV", "[TLV]") {
  auto tlv = rollkit::TLV(5, "\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\
@@@@@@@@@@@@@@@@@@@@@@\
");

  char tlv_test_buf[] = {
    0x05, 0xff,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40,
    0x05, 0x01, 0x40
  };
  string tlv_test(tlv_test_buf, 260);

  TEST_ASSERT(tlv.serialize() == tlv_test);
}
